import 'dart:ffi';

import 'package:json_annotation/json_annotation.dart';

part 'Market.g.dart';

@JsonSerializable()

class Market {
    Market();
    int id;
    String market_name;
    int tatal_unit_count;
    double market_total_venture;
    double history_trade_total_lots;
    double lots;
    double market_total_profit;
    double profit;
    double volume;
    double time_msc;
    int market_total_order_count;
    int statue;
    int time;
    int flags;
    double volume_real;
    bool custome;
    int chart_mode;
    int select;
    bool visible;
    int session_deals;
    int session_sell_orders;
    double volumehigh;
    double volumelow;
    int digits;
    double spread;
    bool spread_float;
    int ticks_bookdepth;
    int trade_calc_mode;
    int trade_mode;
    int start_time;
    int expiration_time;
    int trade_stops_level;
    int trade_freeze_level;
    int trade_exemode ;
    int swap_mode;
    int swap_rollover3days;
    bool margin_hedged_use_leg;
    int expiration_mode;
    int filling_mode;
    int order_mode;
    int order_gtc_mode;
    int option_mode;
    int option_right;
    double bid;
    double bidhigh;
    double bidlow;
    double ask;
    double askhigh;
    double asklow;
    double last;
    double lasthigh;
    double lastlow;
    double volumehigh_real;
    double option_strike;
    double point;
    double trade_tick_value;
    double trade_tick_value_profit;
    double trade_tick_value_loss;
    double trade_tick_size;
    double trade_contract_size;
    double trade_accrued_interest;
    double trade_face_value;
    double trade_liquidity_rate;
    double volume_min;
    double volume_max;
    double volume_step;
    double volume_limit;
    double swap_long;
    double swap_short;
    double margin_initial;
    double margin_maintenance;
    double session_volume;
    double session_turnover;
    double session_interest;
    double session_buy_orders_volume;
    double session_sell_orders_volume;
    double session_open;
    double session_close;
    double session_aw;
    double session_price_settlement;
    double session_price_limit_min;
    double session_price_limit_max;
    double margin_hedged;
    double price_change;
    double price_volatility;
    double price_theoretical;
    double price_greeks_delta;
    double price_greeks_theta;
    double price_greeks_gamma;
    double price_greeks_vega;
    double price_greeks_rho;
    double price_greeks_omega;
    double price_sensitivity;
    String basis ;
    String category ;
    String currency_base ;
    String currency_profit ;
    String currency_margin ;
    String bank ;
    String description ;
    String exchange ;
    String formula;
    String isin;
    String name;
    String page;
    String path;
    factory Market.fromJson(Map<String, dynamic> json) => _$MarketFromJson(json);

    Map<String, dynamic> toJson() => _$MarketToJson(this);

}